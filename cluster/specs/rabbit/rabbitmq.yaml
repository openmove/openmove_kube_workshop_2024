apiVersion: v1
kind: ServiceAccount
metadata:
  name: rabbitmq
  namespace: rabbitmq
---
apiVersion: rbac.authorization.k8s.io/v1
kind: Role
metadata:
  name: rabbitmq-role
  namespace: rabbitmq
rules:
- apiGroups: [""]
  resources: ["endpoints"]
  verbs: ["get"]
---
apiVersion: rbac.authorization.k8s.io/v1
kind: RoleBinding
metadata:
  name: rabbitmq-role-binding
  namespace: rabbitmq
subjects:
  -
    kind: ServiceAccount
    name: rabbitmq
roleRef:
  kind: Role
  name: rabbitmq-role
  apiGroup: rbac.authorization.k8s.io
---
apiVersion: v1
kind: ConfigMap
metadata:
  name: rabbitmq-config
  namespace: rabbitmq
data:
  RABBITMQ_VM_MEMORY_HIGH_WATERMARK: "0.6"
---
apiVersion: v1
kind: ConfigMap
metadata:
  name: rabbitmq-customizations
  namespace: rabbitmq
data:
  enabled_plugins: "[rabbitmq_management,rabbitmq_shovel,rabbitmq_shovel_management,rabbitmq_peer_discovery_k8s]."
---
apiVersion: v1
kind: ConfigMap
metadata:
  name: rabbitmq-migration-scripts
  namespace: rabbitmq
data:
  cluster_formation.peer_discovery_backend: rabbit_peer_discovery_k8s
  cluster_formation.k8s.host: kubernetes.default.svc.cluster.local.
  cluster_formation.k8s.address_type: hostname
  cluster_formation.k8s.service_name: rabbitmq
  cluster_formation.k8s.hostname_suffix: .rabbitmq.rabbitmq.svc.cluster.local
  cluster_formation.node_cleanup.interval: "30"
  cluster_formation.node_cleanup.only_log_warning: "true"
  cluster_partition_handling: autoheal
  queue_master_locator: min-masters
  migrate.sh: |
    for entry in /var/migrate-to-rabbitmq-conf/*
    do
      STRIPPED_FILENAME="${entry##*/}";

      if [ "${STRIPPED_FILENAME}" != "migrate.sh" ]; then

        echo -n "${STRIPPED_FILENAME}=">>/etc/rabbitmq/rabbitmq.conf;
        cat "${entry}">>/etc/rabbitmq/rabbitmq.conf;
        echo "">>/etc/rabbitmq/rabbitmq.conf;
      fi
    done
---
apiVersion: v1
kind: Service
metadata:
  name: rabbitmq-management
  namespace: rabbitmq
  labels:
    app: rabbitmq
spec:
  type: ClusterIP
  ports:
    -
      port: 15672
      name: http
  selector:
    app: rabbitmq
---
apiVersion: v1
kind: Service
metadata:
  name: rabbitmq
  namespace: rabbitmq
  labels:
    app: rabbitmq
spec:
  clusterIP: None
  ports:
    -
      name: amqp
      port: 5672
      targetPort: 5672
      protocol: TCP
    -
      name: epmd
      port: 4369
      targetPort: 4369
      protocol: TCP
    -
      name: rabbitmq-dist
      port: 25672
      targetPort: 25672
      protocol: TCP
  selector:
    app: rabbitmq
---
apiVersion: apps/v1
kind: StatefulSet
metadata:
  name: rabbitmq
  namespace: rabbitmq
spec:
  selector:
    matchLabels:
      app: rabbitmq
  serviceName: rabbitmq
  podManagementPolicy: Parallel
  replicas: 1
  template:
    metadata:
      labels:
        app: rabbitmq
    spec:
      serviceAccountName: rabbitmq
      terminationGracePeriodSeconds: 20
      affinity:
        podAntiAffinity:
          requiredDuringSchedulingIgnoredDuringExecution:
            -
              labelSelector:
                matchExpressions:
                  -
                    key: app
                    operator: In
                    values:
                      - rabbitmq
              topologyKey: "kubernetes.io/hostname"
      initContainers:
        -
          name: install
          image: rabbitmq:3.8.3-management-alpine
          command:
            - /bin/sh
            - -c
            - >
              rm -Rf /etc/rabbitmq/enabled_plugins &&
              ln -s /var/rabbitmq-customizations/enabled_plugins /etc/rabbitmq/enabled_plugins &&
              /var/migrate-to-rabbitmq-conf/migrate.sh
          volumeMounts:
            -
              name: rabbitmq-customizations
              mountPath: /var/rabbitmq-customizations
            -
              name: migrate-to-rabbitmq-conf
              mountPath: /var/migrate-to-rabbitmq-conf
            -
              name: rabbitmq-configuration
              mountPath: /etc/rabbitmq
      containers:
        -
          name: rabbitmq
          image: rabbitmq:3.8.3-management-alpine
          lifecycle:
            preStop:
              exec:
                command: ["rabbitmqctl", "shutdown"]
          resources:
            requests:
              memory: 500M
              cpu: 1000m
            limits:
              memory: 2000M
              cpu: 1500m
          startupProbe:
            exec:
              command:
                ["rabbitmq-diagnostics", "node_health_check"]
            initialDelaySeconds: 10
            periodSeconds: 30
            timeoutSeconds: 20
          # livenessProbe:
          #   exec:
          #     command:
          #       ["rabbitmq-diagnostics", "status"]
          #   initialDelaySeconds: 15
          #   periodSeconds: 30
          #   timeoutSeconds: 20
          readinessProbe:
            exec:
              command:
                ["rabbitmq-diagnostics", "ping"]
            initialDelaySeconds: 30
            periodSeconds: 30
            timeoutSeconds: 20
          envFrom:
            -
              configMapRef:
                name: rabbitmq-config
          env:
            -
              name: HOSTNAME
              valueFrom:
                fieldRef:
                  fieldPath: metadata.name
            -
              name: NAMESPACE
              valueFrom:
                fieldRef:
                  fieldPath: metadata.namespace
            -
              name: RABBITMQ_USE_LONGNAME
              value: "true"
            -
              name: RABBITMQ_NODENAME
              value: "rabbit@$(HOSTNAME).rabbitmq.$(NAMESPACE).svc.cluster.local"
            -
              name: K8S_SERVICE_NAME
              value: "rabbitmq"
            -
              name: RABBITMQ_DEFAULT_USER
              valueFrom:
                secretKeyRef:
                  name: rabbitmq
                  key: RABBITMQ_ADMIN_USER
            -
              name: RABBITMQ_DEFAULT_PASS
              valueFrom:
                secretKeyRef:
                  name: rabbitmq
                  key: RABBITMQ_ADMIN_PASSWORD
            -
              name: NODE_NAME
              valueFrom:
                fieldRef:
                  fieldPath: metadata.name
            -
              name: RABBITMQ_ERLANG_COOKIE
              valueFrom:
                secretKeyRef:
                  name: rabbitmq
                  key: RABBITMQ_ERLANG_COOKIE
            -
              name: RABBITMQ_SERVER_ADDITIONAL_ERL_ARGS
              value: '+sbwt none +sbwtdcpu none +sbwtdio none'
          ports:
            -
              containerPort: 4369
            -
              containerPort: 5672
            -
              containerPort: 25672
            -
              containerPort: 15672
            -
              containerPort: 9419
          volumeMounts:
            -
              name: rabbitmq-customizations
              mountPath: /var/rabbitmq-customizations
            -
              name: rabbitmq-configuration
              mountPath: /etc/rabbitmq
            -
              name: rabbitmq-pvc
              mountPath: /var/lib/rabbitmq/mnesia
      volumes:
        -
          name: rabbitmq-configuration
          emptyDir: {}
        -
          name: rabbitmq-customizations
          configMap:
            name: rabbitmq-customizations
        -
          name: migrate-to-rabbitmq-conf
          configMap:
            name: rabbitmq-migration-scripts
            defaultMode: 0777
  volumeClaimTemplates:
    -
      metadata:
        name: rabbitmq-pvc
      spec:
        accessModes:
          -
            ReadWriteOnce
        storageClassName: standard
        resources:
          requests:
            storage: 5Gi
